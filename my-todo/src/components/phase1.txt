<template>
  <div class="board-app">
    <h1>My Trello-like Board</h1>
    
    <div class="boards" @dragover.prevent @drop="dropTask">
      <div v-for="board in boards" :key="board.id" class="board" :data-board-id="board.id">
        <h3>{{ board.name }}</h3>
        <ul v-for="task in board.tasks" :key="task.id" draggable="true" @dragstart="dragTask(task)">
          <li class="task-card">
            <strong>{{ task.name }}</strong>
            <p>{{ task.description }}</p>
            <ul v-if="board.name === 'In Progress' && task.updates">
  <li v-for="(update, index) in task.updates" :key="index">{{ update }}</li>
</ul>
            <div v-if="board.name === 'In Progress'" class="task-update-section">
              <input v-model="task.newUpdate" @keyup.enter="addUpdate(task)" placeholder="Add update" />
              <button @click="addUpdate(task)">Update</button>
            </div>
          </li>
        </ul>
        <div v-if="board.name === 'To Do'" class="task-input-section">
          <input v-model="board.newTaskName" @keyup.enter="addTask(board)" placeholder="Task name" />
          <textarea v-model="board.newTaskDescription" @keyup.enter="addTask(board)" placeholder="Task description"></textarea>
          <button @click="addTask(board)">Add Task</button>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
export default {
  data() {
    return {
      boards: [
        { id: 1, name: 'To Do', tasks: [], newTaskName: '', newTaskDescription: '' },
        { id: 2, name: 'In Progress', tasks: [] },
        { id: 3, name: 'Done', tasks: [] }
      ],
      draggedTask: null
    };
  },
  methods: {
    addTask(board) {
      if (board.newTaskName.trim() !== '') {
        board.tasks.push({
          id: Date.now(),
          name: board.newTaskName,
          description: board.newTaskDescription,
          updates: [],
          newUpdate: ''
        });
        board.newTaskName = '';
        board.newTaskDescription = '';
      }
    },
    dragTask(task) {
      this.draggedTask = task;
    },
    dropTask(event) {
      const boardId = event.target.closest('.board').getAttribute('data-board-id');
      const board = this.boards.find(b => b.id === parseInt(boardId));
      if (board && this.draggedTask) {
        const originBoard = this.boards.find(b => b.tasks.includes(this.draggedTask));
        originBoard.tasks = originBoard.tasks.filter(t => t !== this.draggedTask);
        board.tasks.push(this.draggedTask);
      }
    },
    addUpdate(task) {
      if (task.newUpdate.trim() !== '') {
        task.updates.push(task.newUpdate);
        task.newUpdate = '';
      }
    }
  }
};
</script>
<style scoped>
.board-app {
  max-width: 100%;
  margin: 20px auto;
  padding: 30px;
}

.boards {
  display: flex;
  gap: 20px;
  overflow-x: auto;
}

.board, .add-board {
  min-width: 250px;
  padding: 15px;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
  border-radius: 10px;
  background-color: #f5f5f5;
  flex-shrink: 0;
}

.task-card {
  padding: 10px;
  margin-bottom: 10px;
  background-color: white;
  border-radius: 5px;
}

.task-input-section {
  display: flex;
  flex-direction: column;
  gap: 10px;
}

input[type="text"], textarea {
  padding: 10px 15px;
  box-sizing: border-box;
  border: 1px solid #ccc;
  border-radius: 5px;
  outline: none;
}

textarea {
  resize: vertical;
  min-height: 60px;
}

button {
  background-color: #007BFF;
  color: white;
  padding: 10px 15px;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s;
}

button:hover {
  background-color: #0056b3;
}
</style>
